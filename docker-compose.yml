services:
  router_a:
    build:
      context: ./router
      dockerfile: router/Dockerfile
    container_name: router_a
    networks:
      net_a:
        ipv4_address: 10.0.1.100
      net_ab:
        ipv4_address: 10.0.12.2
      net_ac:
        ipv4_address: 10.0.13.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python router.py
      --id A
      --ip 10.0.1.100
      --listen_port 5001
      --neighbors "B:10.0.12.3:5002" "C:10.0.13.3:5003" "H1:10.0.1.2:7001" "H2:10.0.1.3:7002"

  router_b:
    build:
      context: ./router
      dockerfile: router/Dockerfile
    container_name: router_b
    networks:
      net_b:
        ipv4_address: 10.0.2.100
      net_ab:
        ipv4_address: 10.0.12.3
      net_bd:
        ipv4_address: 10.0.24.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python router.py
      --id B
      --ip 10.0.2.100
      --listen_port 5002
      --neighbors "D:10.0.24.3:5004" "A:10.0.12.2:5001" "H3:10.0.2.2:7003" "H4:10.0.2.3:7004"

  router_c:
    build:
      context: ./router
      dockerfile: router/Dockerfile
    container_name: router_c
    networks:
      net_c:
        ipv4_address: 10.0.3.100
      net_ac:
        ipv4_address: 10.0.13.3
      net_ce:
        ipv4_address: 10.0.35.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python router.py
      --id C
      --ip 10.0.3.100
      --listen_port 5003
      --neighbors "E:10.0.35.3:5005" "A:10.0.13.2:5001" "H5:10.0.3.2:7005" "H6:10.0.3.3:7006"

  router_d:
    build:
      context: ./router
      dockerfile: router/Dockerfile
    container_name: router_d
    networks:
      net_d:
        ipv4_address: 10.0.4.100
      net_bd:
        ipv4_address: 10.0.24.3
      net_de:
        ipv4_address: 10.0.45.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python router.py
      --id D
      --ip 10.0.4.100
      --listen_port 5004
      --neighbors "B:10.0.24.2:5002" "E:10.0.45.3:5005" "H7:10.0.4.2:7007" "H8:10.0.4.3:7008"

  router_e:
    build:
      context: ./router
      dockerfile: router/Dockerfile
    container_name: router_e
    networks:
      net_e:
        ipv4_address: 10.0.5.100
      net_ce:
        ipv4_address: 10.0.35.3
      net_de:
        ipv4_address: 10.0.45.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python router.py
      --id E
      --ip 10.0.5.100
      --listen_port 5005
      --neighbors "D:10.0.45.2:5004" "C:10.0.35.2:5003" "H9:10.0.5.2:7009" "H10:10.0.5.2:7010"

  host_a1:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_a1
    networks:
      net_a:
        ipv4_address: 10.0.1.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H1
      --host_ip 10.0.1.2
      --router_ip 10.0.1.100
      --router_port 5001
      --listen_port 7001
      --known_hosts H2 H3 H4 H5 H6 H7 H8 H9 H10
    depends_on:
      - router_a

  host_a2:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_a2
    networks:
      net_a:
        ipv4_address: 10.0.1.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H2
      --host_ip 10.0.1.3
      --router_ip 10.0.1.100
      --router_port 5001
      --listen_port 7002
      --known_hosts H1 H3 H4 H5 H6 H7 H8 H9 H10
    depends_on:
      - router_a

  host_b1:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_b1
    networks:
      net_b:
        ipv4_address: 10.0.2.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H3
      --host_ip 10.0.2.2
      --router_ip 10.0.2.100
      --router_port 5002
      --listen_port 7003
      --known_hosts H1 H2 H4 H5 H6 H7 H8 H9 H10
    depends_on:
      - router_b

  host_b2:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_b2
    networks:
      net_b:
        ipv4_address: 10.0.2.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H4
      --host_ip 10.0.2.3
      --router_ip 10.0.2.100
      --router_port 5002
      --listen_port 7004
      --known_hosts H1 H2 H3 H5 H6 H7 H8 H9 H10
    depends_on:
      - router_b

  host_c1:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_c1
    networks:
      net_c:
        ipv4_address: 10.0.3.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H5
      --host_ip 10.0.3.2
      --router_ip 10.0.3.100
      --router_port 5003
      --listen_port 7005
      --known_hosts H1 H2 H3 H4 H6 H7 H8 H9 H10
    depends_on:
      - router_c

  host_c2:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_c2
    networks:
      net_c:
        ipv4_address: 10.0.3.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H6
      --host_ip 10.0.3.3
      --router_ip 10.0.3.100
      --router_port 5003
      --listen_port 7006
      --known_hosts H1 H2 H3 H4 H5 H7 H8 H9 H10
    depends_on:
      - router_c

  host_d1:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_d1
    networks:
      net_d:
        ipv4_address: 10.0.4.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H7
      --host_ip 10.0.4.2
      --router_ip 10.0.4.100
      --router_port 5004
      --listen_port 7007
      --known_hosts H1 H2 H3 H4 H5 H6 H8 H9 H10
    depends_on:
      - router_d

  host_d2:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_d2
    networks:
      net_d:
        ipv4_address: 10.0.4.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H8
      --host_ip 10.0.4.3
      --router_ip 10.0.4.100
      --router_port 5004
      --listen_port 7008
      --known_hosts H1 H2 H3 H4 H5 H6 H7 H9 H10
    depends_on:
      - router_d

  host_e1:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_e1
    networks:
      net_e:
        ipv4_address: 10.0.5.2
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H9
      --host_ip 10.0.5.2
      --router_ip 10.0.5.100
      --router_port 5005
      --listen_port 7009
      --known_hosts H1 H2 H3 H4 H5 H6 H7 H8 H10
    depends_on:
      - router_e

  host_e2:
    build:
      context: ./host
      dockerfile: host/Dockerfile
    container_name: host_e2
    networks:
      net_e:
        ipv4_address: 10.0.5.3
    cap_add: ["NET_ADMIN"]
    tty: true
    stdin_open: true
    command: >
      python host.py
      --id H10
      --host_ip 10.0.5.3
      --router_ip 10.0.5.100
      --router_port 5005
      --listen_port 7010
      --known_hosts H1 H2 H3 H4 H5 H6 H7 H8 H9
    depends_on:
      - router_e

networks:
  net_a:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.1.0/24
  net_b:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.2.0/24
  net_c:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.3.0/24
  net_d:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.4.0/24
  net_e:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.5.0/24
  net_ab:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.12.0/24
  net_ac:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.13.0/24
  net_bd:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.24.0/24
  net_ce:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.35.0/24
  net_de:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.45.0/24